{"ast":null,"code":"import axios from 'axios';\nimport router from \"@/router\";\nimport ElementUI from 'element-ui';\nconst request = axios.create({\n  baseURL: 'http://localhost:9090',\n  timeout: 5000\n});\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8';\n  let user = localStorage.getItem(\"user\") ? localStorage.getItem(\"user\") : null;\n  if (user) {\n    config.headers['token'] = user.token; // 设置请求头\n  }\n\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(response => {\n  let res = response.data;\n  if (res.code === '401') {\n    ElementUI.Message({\n      message: res.msg,\n      type: 'error'\n    });\n  }\n  // 如果是返回的文件\n  if (response.config.responseType === 'blob') {\n    return res;\n  }\n  // 兼容服务端返回的字符串数据\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n  return res;\n}, error => {\n  console.log('err' + error); // for debug\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","router","ElementUI","request","create","baseURL","timeout","interceptors","use","config","headers","user","localStorage","getItem","token","error","Promise","reject","response","res","data","code","Message","message","msg","type","responseType","JSON","parse","console","log"],"sources":["E:/4Projects/SpringBoot_Vue/vue/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport router from \"@/router\";\r\nimport ElementUI from 'element-ui';\r\nconst request = axios.create({\r\n    baseURL: 'http://localhost:9090',\r\n    timeout: 5000\r\n})\r\n\r\n// request 拦截器\r\n// 可以自请求发送前对请求做一些处理\r\n// 比如统一加token，对请求参数统一加密\r\nrequest.interceptors.request.use(config => {\r\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n    let user = localStorage.getItem(\"user\") ? localStorage.getItem(\"user\") : null\r\n    if (user) {\r\n        config.headers['token'] = user.token;  // 设置请求头\r\n    }\r\n    return config\r\n}, error => {\r\n    return Promise.reject(error)\r\n});\r\n\r\n// response 拦截器\r\n// 可以在接口响应后统一处理结果\r\nrequest.interceptors.response.use(\r\n    response => {\r\n        let res = response.data;\r\n        if (res.code === '401') {\r\n            ElementUI.Message({\r\n                message: res.msg,\r\n                type: 'error'\r\n            });\r\n        }\r\n        // 如果是返回的文件\r\n        if (response.config.responseType === 'blob') {\r\n            return res\r\n        }\r\n        // 兼容服务端返回的字符串数据\r\n        if (typeof res === 'string') {\r\n            res = res ? JSON.parse(res) : res\r\n        }\r\n\r\n        return res;\r\n    },\r\n    error => {\r\n        console.log('err' + error) // for debug\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n\r\nexport default request"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,SAAS,MAAM,YAAY;AAClC,MAAMC,OAAO,GAAGH,KAAK,CAACI,MAAM,CAAC;EACzBC,OAAO,EAAE,uBAAuB;EAChCC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACA;AACA;AACAH,OAAO,CAACI,YAAY,CAACJ,OAAO,CAACK,GAAG,CAACC,MAAM,IAAI;EACvCA,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,gCAAgC;EACjE,IAAIC,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,GAAGD,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI;EAC7E,IAAIF,IAAI,EAAE;IACNF,MAAM,CAACC,OAAO,CAAC,OAAO,CAAC,GAAGC,IAAI,CAACG,KAAK,CAAC,CAAE;EAC3C;;EACA,OAAOL,MAAM;AACjB,CAAC,EAAEM,KAAK,IAAI;EACR,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;;AAEF;AACA;AACAZ,OAAO,CAACI,YAAY,CAACW,QAAQ,CAACV,GAAG,CAC7BU,QAAQ,IAAI;EACR,IAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAI;EACvB,IAAID,GAAG,CAACE,IAAI,KAAK,KAAK,EAAE;IACpBnB,SAAS,CAACoB,OAAO,CAAC;MACdC,OAAO,EAAEJ,GAAG,CAACK,GAAG;MAChBC,IAAI,EAAE;IACV,CAAC,CAAC;EACN;EACA;EACA,IAAIP,QAAQ,CAACT,MAAM,CAACiB,YAAY,KAAK,MAAM,EAAE;IACzC,OAAOP,GAAG;EACd;EACA;EACA,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IACzBA,GAAG,GAAGA,GAAG,GAAGQ,IAAI,CAACC,KAAK,CAACT,GAAG,CAAC,GAAGA,GAAG;EACrC;EAEA,OAAOA,GAAG;AACd,CAAC,EACDJ,KAAK,IAAI;EACLc,OAAO,CAACC,GAAG,CAAC,KAAK,GAAGf,KAAK,CAAC,EAAC;EAC3B,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CACJ;AAGD,eAAeZ,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}